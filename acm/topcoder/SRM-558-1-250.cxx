#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class SurroundingGameEasy {
public:
    int compute_cost(vector <string> cost, vector <string> stone) {
        int res_val=0;
        int width = stone[1].length();
        int height = stone.size();

        int i,j;
        for(i = 0; i < height; i++) {
            for(j=0; j < width; j++) {
                if(stone[i][j] == 'o' )
                    res_val += cost[i][j]-'0';
            }
        }
        return res_val;
    }

    int compute_benifit(vector<string> benefit, vector<string> stone) {
        int res_val = 0;
        int width = stone[1].length();
        int height = stone.size();

        int i,j;
        for(i = 0; i < height; i++) {
            for(j=0; j < width; j++) {
                if(stone[i][j] == 'o' ) {
                    // Benifit of cells contain stone;
                    res_val += benefit[i][j]-'0';
                    cout << "benifit of cells contain stone:"<<res_val << endl;
                } else {
                    if( (i==0 || stone[i-1][j] == 'o')
                        &&(j==0 || stone[i][j-1] == 'o')
                        &&(i==(height-1) || stone[i+1][j] == 'o')
                        &&(j==(width-1) || stone[i][j+1] == 'o'))
                        // Benifit of cells surround with stone
                        res_val += benefit[i][j]-'0';
                    cout << "benifit of cells total:"<<res_val << endl;
                }
            }
        }
        return res_val;
    }

    int score(vector <string> cost, vector <string> benefit, vector <string> stone) {
        int res_val = 0;
        int cost_val = compute_cost( cost, stone);
        cout <<"cost_val=" << cost_val << endl;
        int benifit_val = compute_benifit(benefit, stone);
        cout <<"benifit_val=" << benifit_val << endl;

        res_val = benifit_val - cost_val;
        return res_val; 
    }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, vector <string> p2, bool hasAnswer, int p3) {
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p0[i] << "\"";
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p1[i] << "\"";
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p2.size()) > i; ++i) {
        if (i > 0) {
            cout << ",";
        }
        cout << "\"" << p2[i] << "\"";
    }
    cout << "}";
    cout << "]" << endl;
    SurroundingGameEasy *obj;
    int answer;
    obj = new SurroundingGameEasy();
    clock_t startTime = clock();
    answer = obj->score(p0, p1, p2);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer) {
        cout << "Desired answer:" << endl;
        cout << "\t" << p3 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer) {
        res = answer == p3;
    }
    if (!res) {
        cout << "DOESN'T MATCH!!!!" << endl;
    } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
        cout << "FAIL the timeout" << endl;
        res = false;
    } else if (hasAnswer) {
        cout << "Match :-)" << endl;
    } else {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main() {
    bool all_right;
    all_right = true;
    
    vector <string> p0;
    vector <string> p1;
    vector <string> p2;
    int p3;
    
    {
    // ----- test 0 -----
    string t0[] = {"21","12"};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    string t1[] = {"21","12"};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    string t2[] = {".o","o."};
            p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
    p3 = 4;
    all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
    // ------------------
    }
    
    {
    // ----- test 1 -----
    string t0[] = {"99","99"};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    string t1[] = {"11","11"};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    string t2[] = {".o","o."};
            p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
    p3 = -14;
    all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
    // ------------------
    }
    
    {
    // ----- test 2 -----
    string t0[] = {"888","888","888"};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    string t1[] = {"000","090","000"};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    string t2[] = {"...",".o.","..."};
            p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
    p3 = 1;
    all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
    // ------------------
    }
    
    {
    // ----- test 3 -----
    string t0[] = {"4362","4321"};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    string t1[] = {"5329","5489"};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    string t2[] = {"...o","..o."};
            p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
    p3 = 22;
    all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
    // ------------------
    }
    
    {
    // ----- test 4 -----
    string t0[] = {"5413","4323","8321","5490"};
            p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    string t1[] = {"0432","7291","3901","2310"};
            p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    string t2[] = {"ooo.","o..o","...o","oooo"};
            p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
    p3 = -12;
    all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
    // ------------------
    }
    
    if (all_right) {
        cout << "You're a stud (at least on the example cases)!" << endl;
    } else {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
