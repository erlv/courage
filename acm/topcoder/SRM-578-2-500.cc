#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>

#define ABS(X) ( (X) > 0 ? (X) : (-(X) ) )
#define LL long long

using namespace std;

/** 
 * This is a graph search problem.
 *  1. If one v-cell have goose, all the other v-cells that is inside of the 
 *     Manhattan distance should be goose. So we could divided the whole cage
 *     into several independent v-cell set Si. All the v-cells inside the Si
 *     should be, or should not be goose.
 *  2. If there are k v-cell set, the result will be 2^k -1 ( Since the cage
 *      have at least 1 goose.
 *  3. The problems is how to find out the v-cell set numbers.
 *     Using Graph Search ? ( TODO: why)
 *  Links:
 *   Problem: http://community.topcoder.com/stat?c=problem_statement&pm=12545&rd=15498
 *   Analysis: http://apps.topcoder.com/wiki/display/tc/SRM+578
 */

/**
 * field: the bottom of the cage.
 * dist:  the Manhattan distance of any goose is also a goose.
 * RETURN: the number of possible sets of geese in the cage.
 */
class GooseInZooDivTwo {
  vector<string> F;
  int vis[55][55];
  int d,R,C;

public:

  void DFS(int r, int c) {
    vis[r][c] = 1;
    int i,j;
    for( i = 0; i < R; i++) {
      for( j = 0; j < C; j++) {
	if( (F[i][j] == 'v') && (ABS(r-i) + ABS(c - j) <= d) && (vis[i][j] == 0)) {
	  DFS(i,j);
	}
      }
    }
  }

  int count(vector <string> field, int dist) {
    int i,j;
    int cnt;

    F= field;
    d = dist;

    memset( vis, 0, sizeof(vis));

    R = field.size();
    C = field[0].size();
    
    cnt = 0;
    for( i= 0; i < R; i++) 
      for(j=0; j < C; j++) {
	if( vis[i][j] ) continue;
	if( F[i][j] == '.') continue;
	cnt++;
	DFS(i, j);
      }
    
    LL ans = 1;
    for( i = 1; i <= cnt; i++) 
      ans = (ans * 2)% 1000000007;

    ans = ( ans - 1 + 1000000007 ) % 1000000007;

    return ans;
  }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, int p2) {
  cout << "Test " << testNum << ": [" << "{";
  for (int i = 0; int(p0.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << "\"" << p0[i] << "\"";
  }
  cout << "}" << "," << p1;
  cout << "]" << endl;
  GooseInZooDivTwo *obj;
  int answer;
  obj = new GooseInZooDivTwo();
  clock_t startTime = clock();
  answer = obj->count(p0, p1);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p2 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p2;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;

  vector <string> p0;
  int p1;
  int p2;

  {
    // ----- test 0 -----
    string t0[] = {"vvv"};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 0;
    p2 = 7;
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------
  }

  {
    // ----- test 1 -----
    string t0[] = {"."};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 100;
    p2 = 0;
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------
  }

  {
    // ----- test 2 -----
    string t0[] = {"vvv"};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 1;
    p2 = 1;
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------
  }

  {
    // ----- test 3 -----
    string t0[] = {"v.v..................v............................",".v......v..................v.....................v","..v.....v....v.........v...............v......v...",".........vvv...vv.v.........v.v..................v",".....v..........v......v..v...v.......v...........","...................vv...............v.v..v.v..v...",".v.vv.................v..............v............","..vv.......v...vv.v............vv.....v.....v.....","....v..........v....v........v.......v.v.v........",".v.......v.............v.v..........vv......v.....","....v.v.......v........v.....v.................v..","....v..v..v.v..............v.v.v....v..........v..","..........v...v...................v..............v","..v........v..........................v....v..v...","....................v..v.........vv........v......","..v......v...............................v.v......","..v.v..............v........v...............vv.vv.","...vv......v...............v.v..............v.....","............................v..v.............."
		   "...v",".v.............v.......v..........................","......v...v........................v..............",".........v.....v..............vv..................","................v..v..v.........v....v.......v....","........v.....v.............v......v.v............","...........v....................v.v....v.v.v...v..","...........v......................v...v...........","..........vv...........v.v.....................v..",".....................v......v............v...v....",".....vv..........................vv.v.....v.v.....",".vv.......v...............v.......v..v.....v......","............v................v..........v....v....","................vv...v............................","................v...........v........v...v....v...","..v...v...v.............v...v........v....v..v....","......v..v.......v........v..v....vv..............","...........v..........v........v.v................","v.v......v................v....................v..",".v........v............................."
		   "...v......","............................v...v.......v.........","........................vv.v..............v...vv..",".......................vv........v.............v..","...v.............v.........................v......","....v......vv...........................v.........","....vv....v................v...vv..............v..","..................................................","vv........v...v..v.....v..v..................v....",".........v..............v.vv.v.............v......",".......v.....v......v...............v.............","..v..................v................v....v......",".....v.....v.....................v.v......v......."};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 3;
    p2 = 797922654;
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------
  }

  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
